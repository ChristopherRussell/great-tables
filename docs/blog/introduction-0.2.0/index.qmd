---
title: "Great Tables `v0.2.0`: Now You Can Colorize Your Data"
html-table-processing: none
author: Rich Iannone
date: 2024-01-24
freeze: true
jupyter: python3
---

We enjoy working on **Great Tables** because we want everybody to easily make beautiful tables. Tables don't have to be boring, they really could be captivating and insightful. With every release we get closer and closer to realizing our mission and, as such, we're happy to announce the `v0.2.0` release that's now on PyPI.

The really big feature that's available with this release is the `data_color()` method. It gives you several options for colorizing data cells based on the underlying data. You can provide a list of colors to `palette=` and even specify the value range with `domain=` (`na_color=` will use a color you specify for missing or out-of-range values). Here's a very basic example that uses a small portion of the `exibble` dataset and adds background fills to a single column (`currency`).

```{python}
from great_tables import GT, exibble

(
    GT(exibble[["currency", "date", "row"]].head(4), rowname_col="row")
    .data_color(
        columns="currency",
        palette=["lightblue", "darkgreen"],
        domain=[0, 50],
        na_color="lightgray"
    )
    .fmt_currency(
        columns="currency",
        currency="GBP",
        use_subunits=False
    )
)
```

You can specify which columns get the colorizing treatment with `columns=`, and, isn't it nice that the text adapts to the background color? The `data_color()` method looks at the underlying data so formatting methods (like `fmt_currency()`) never interfere with the styling generated by `data_color()`.

Here's a more inspirational example that uses a heavily-manipulated version of the `countrypops` dataset (thank you, **Polars**!) along with a color treatment that's mediated by `data_color()`. Here, the population values can be easily compared by the amount of `"purple"` within them.

```{python}
from great_tables.data import countrypops
import polars as pl
import polars.selectors as cs

wide_pops = (
    pl.from_pandas(countrypops)
    .filter(
        pl.col("country_code_2").is_in(["FM", "GU", "KI", "MH", "MP", "NR", "PW"])
        & pl.col("year").is_in([2000, 2010, 2020])
    )
    .with_columns(pl.col("country_code_2").replace(region_to_country).alias("region"))
    .pivot(index=["country_name", "region"], columns="year", values="population")
    .sort("2020", descending=True)
)

(
    GT(wide_pops, rowname_col="country_name")
    .tab_header(
        title="Populations of Select Countries in Oceania",
        subtitle="Population values are from 2000, 2010, and 2020."
    )
    .tab_spanner(label="Total Population", columns=cs.all())
    .fmt_integer(columns=["2000", "2010", "2020"])
    .cols_hide(columns="region")
    .data_color(
        palette=["white", "purple"],
        domain=[0, 1.7e5]
    )
)
```

This was just a sampler of what you can do with the all-new `data_color()` method. We put together a guide in the *Get Started* section of the project website and it provides more details on how to use `data_color()` (many more than we can show you in this blog post).

To conclude, we're happy that this new functionality is now in the **Great Tables** package! We hope you find it useful for your table-generation work. And we'll keep improving upon it so that you'll have more possibilities to make beautiful, and colorful, tables for presentation.
